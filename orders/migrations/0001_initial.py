# Generated by Django 5.2 on 2025-05-01 14:54

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('menu', '0001_initial'),
        ('tables', '0002_alter_table_seats_alter_table_table_number_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in progress', 'In Progress'), ('served', 'Served'), ('paid', 'Paid'), ('cancelled', 'Cancelled')], default='pending', max_length=15)),
                ('table', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='tables.table')),
            ],
            options={
                'ordering': ('-created_at', '-updated_at'),
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('note', models.TextField(blank=True, default='')),
                ('daily_menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='menu.dailymenuitem')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='orders.order')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('quantity__gte', 1)), name='order_item_quantity_gte_1', violation_error_message='Quantity must be greater than or equal to 1'), models.CheckConstraint(condition=models.Q(('unit_price__gte', 0)), name='order_item_price_gte_0', violation_error_message='Price must be greater than or equal to 0')],
            },
        ),
    ]
